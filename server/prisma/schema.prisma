generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Site {
  id        String     @id @default(uuid())
  domain    String     @unique
  category  String?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  analyses  Analysis[]
  policies  Policy[]
}

model Policy {
  id          String      @id @default(uuid())
  siteId      String
  url         String
  lang        String?
  rawTextHash String
  createdAt   DateTime    @default(now())
  analyses    Analysis[]
  extraction  Extraction?
  site        Site        @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model Extraction {
  id                 String   @id @default(uuid())
  policyId           String   @unique
  extractionJson     Json
  adsP75Days         Int
  analyticsP75Days   Int
  thirdPartiesCount  Int
  hasChoices         Boolean
  rejectNonEssential String
  rightsListed       Boolean
  contactPresent     Boolean
  pdRetentionPresent Boolean
  lastUpdatedPresent Boolean
  readabilityHint    String
  createdAt          DateTime @default(now())
  policy             Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
}

model Analysis {
  id                String   @id @default(uuid())
  siteId            String
  policyId          String
  clarityScoreRule  Int
  safetyScoreRule   Int
  clarityScoreFinal Int
  safetyScoreFinal  Int
  verdict           String
  aiProvider        String?
  aiVersion         String?
  aiOutput          Json?
  createdAt         DateTime @default(now())
  policy            Policy   @relation(fields: [policyId], references: [id], onDelete: Cascade)
  site              Site     @relation(fields: [siteId], references: [id], onDelete: Cascade)
}

model Baseline {
  id               String   @id @default(uuid())
  siteCategory     String
  adsP75Days       Int
  analyticsP75Days Int
  thirdPartyBands  Json
  notes            String?
  updatedAt        DateTime @updatedAt
}
